
# LEFT_SHOULDER
# x: 0.0750
# y: -0.4818
# z: -0.1057
# a = {'x': 0.0750, 'y': -0.4818, 'z': -0.1057}
# LEFT_ELBOW
# x: 0.2670
# y: -0.5020
# z: -0.0265
# b = {'x': 0.2670, 'y': -0.5020, 'z': -0.0265}
# RIGHT_SHOULDER
# x: -0.2169
# y: -0.3823
# z: -0.1890
# c = {'x': -0.2169, 'y': -0.3823, 'z': -0.1890}

import math
import numpy as np

def vAngle(v1, v2):

    x = math.atan2(v2['z'] - v1['x'], v2['z'] - v1['x'])
    y = math.atan2(v2['z'] - v1['y'], v2['z'] - v1['y'])
    z = math.atan2(v2['x'] - v1['y'], v2['x'] - v1['y'])

    return {
        'x': x,
        'y': y,
        'z': z
    }


# x : -2.356194490192345
# y : 0.7853981633974483
# z : 0.7853981633974483


# 12, 11, 13 오른쪽 어께, 왼쪽 어께, 왼쪽 팔꿈치
# 11, 12, 14 왼쪽 어께, 오른쪽 어께, 오른쪽 팔꿈치

# 두 점 사이의 벡터 거리 구하기
# a.x - b.x, a.y - b.y, a.z - b.z

def vDistance(v1, v2):
    return np.array([v2['x'] - v1['x'], v2['y'] - v1['y'], v2['z'] - v1['z']])

# 12와 11의 벡터 거리
# print(c['x'] - a['x'], c['y'] - a['y'], c['z'] - a['z'])

# np.array([-0.2919, 0.09950000000000003, -0.0833])

# 13과 11의 벡터 거리
# print(b['x'] - a['x'], b['y'] - a['y'], b['z'] - a['z'])

# np.array([0.192, -0.020199999999999996, 0.0792])

# np.linalg.norm을 이용해도 구현할 수 있다.
def L2_norm(x):
    x_norm = x * x
    x_norm = np.sum(x_norm)
    x_norm = np.sqrt(x_norm)
    return x_norm

# 내적해서 각도 구하기
def angle(x, y):
    v = np.inner(x, y) / (L2_norm(x) * L2_norm(y))
    theta = np.arccos(v)
    return theta

# 구한 두개의 벡터거리 내적해서 각도 구하기

# 2.8955475656568854



# 이제 넣으면~

# x : -2.356194490192345
# y : 2.8955475656568854
# z : 0.7853981633974483

# 이게 되는 것 같다.



# 13, 15 왼쪽 팔꿈치, 왼쪽 손목
# 14, 16 오른쪽 팔꿈치, 오른쪽 손목




# LEFT_SHOULDER
# x: 0.0504
# y: -0.4986
# z: -0.0081
# a = {'x': 0.0504, 'y': -0.4986, 'z': -0.0081}
# LEFT_ELBOW
# x: 0.2352
# y: -0.4873
# z: 0.0663
# b = {'x': 0.2352, 'y':-0.4873, 'z': 0.0663}
# LEFT_WRIST
# x: 0.4088
# y: -0.4771
# z: 0.0533
# c = {'x': 0.4088, 'y': -0.4771, 'z': 0.0533}

# 'x': math.atan2(b['z'] - a['x'], b['z'] - a['x'])
# 'y': math.atan2(b['z'] - a['y'], b['z'] - a['y'])
# 'z': math.atan2(b['x'] - a['y'], b['x'] - a['y'])

# 'x': 0.7853981633974483
# 'y': 0.7853981633974483
# 'z': 0.7853981633974483

# 이제 vAngle(v1, v2) 요걸로 구할 수 있다.

# y: 11, 13, 15 왼쪽 어께(a), 왼쪽 팔꿈치(b), 왼쪽 손목(c)
# y: 12, 14, 16 오른쪽 어께, 오른쪽 팔꿈치, 오른쪽 손목

# 두 점 사이의 벡터 거리 구하기
# a.x - b.x, a.y - b.y, a.z - b.z

# 11와 13의 벡터 거리
# print(a['x'] - b['x'], a['y'] - b['y'], a['z'] - b['z'])
 
# np.array([-0.1848, -0.011299999999999977,  -0.0744])

# 15과 13의 벡터 거리
# print(c['x'] - b['x'], c['y'] - b['y'], c['z'] - b['z'])

# np.array([0.1736, 0.010199999999999987, -0.012999999999999998])

# 이제 vDistance(v1, v2) 요걸로 구할 수 있다.

# 구한 두개의 벡터거리 내적해서 각도 구하기
# 2.6848721427652755

# 이제 angle(x, y) 요걸로 구하면 된다.

# 구한 값 y 값에 넣기
# 'x': 0.7853981633974483
# 'y': 2.6848721427652755
# 'z': 0.7853981633974483

# z 값도 같으니까 z값도 계산~

# (val: number, min: number, max: number)

# LowerArm.r.z, -2.14, 0
# math.max(math.min(val, max), min)

# max(min(0.7853981633974483, 0), -2.14)

def clamp(val, min, max):
    return max(min(val, max), min)

# 0

# 'x': 0.7853981633974483
# 'y': 2.6848721427652755
# 'z': 0

# 최종 구한 값

